{
  "version": 3,
  "sources": ["../../src/index.ts"],
  "sourcesContent": ["// implementation taken from spec\n// https://semver.org/\n\n// numbers start high for backwards compatiblity\n// in case I want to add more tags in the beginning\nconst LOWEST_TAG_VAL = 999\nconst prereleaseTags = {\n    prealpha: LOWEST_TAG_VAL,\n    alpha: 1_000,\n    beta: 1_001,\n    rc: 1_002\n} as const\n\ntype PrereleaseTag = keyof typeof prereleaseTags\n\nconst isPositiveNumber = (n: number) => !Number.isNaN(n) && n > -1\n\nexport const MAX_VERSION_LENGTH = 256\n\nexport const NO_PRE_RELEASE_BUILD_SPECIFIED = -1\n\nexport const NO_PRE_RELEASE_TAG = \"none\"\n\nexport type SemVersionPrerelease = (\n    typeof NO_PRE_RELEASE_TAG | PrereleaseTag\n)\n\nconst getSemanticVersion = (version: string) => {\n    if (version.length < 1 || version.length > MAX_VERSION_LENGTH) {\n        return null\n    }\n\n    const versionSplit = version.split(\"-\")\n    if (versionSplit.length > 2) {\n        return null\n    }\n    \n    const versionsCore = versionSplit[0]\n        .split(\".\")\n        .filter(v => v.length > 0) as [string, string, string]\n    if (versionsCore.length !== 3) {\n        return null\n    }\n\n    const parsedVersions = versionsCore.map(v => parseInt(v, 10))\n    const validVersionNumbers = parsedVersions\n        .map(v => isPositiveNumber(v))\n        .reduce((t, passed) => t && passed, true)\n    if (!validVersionNumbers) {\n        return null\n    }\n    const semver = new SemVer(\n        ...parsedVersions as [number, number, number], \n        NO_PRE_RELEASE_TAG, NO_PRE_RELEASE_BUILD_SPECIFIED\n    )\n    if (versionSplit.length < 2) {\n        return semver\n    }\n    \n    const prereleaseAndBuild = versionSplit[1]\n    const split = prereleaseAndBuild.split(\".\")\n    if (split.length > 2 || split.length < 0) {\n        return null\n    }\n\n    const prerelease = split[0]\n    const tags = Object.keys(prereleaseTags)\n    if (!Object.keys(prereleaseTags).includes(prerelease)) {\n        return null\n    } else {\n        semver.preReleaseTag = prerelease as PrereleaseTag\n    }\n\n    if (split.length < 2) {\n        // if no build number specified after\n        // prerelease tag, default to build zero\n        semver.preReleaseBuild = 0\n        return semver\n    }\n\n    const build = split[1]\n    const parsedBuild = parseInt(build, 10)\n    if (isPositiveNumber(parsedBuild)) {\n        semver.preReleaseBuild = parsedBuild\n    } else if (tags.includes(build)) {\n        const b = build as PrereleaseTag\n        const tagVal = prereleaseTags[b]\n        const tagValToBuild = Math.max(\n            tagVal - LOWEST_TAG_VAL, 0\n        )\n        semver.preReleaseBuild = tagValToBuild\n    } else {\n        return null\n    }\n\n    return semver\n}\n\nconst enum compare {\n    equal = -1,\n    current_higher = 0,\n    current_lower = 1\n}\n\nexport class SemVer {\n    static null(): SemVer {\n        return new SemVer(0, 0, 0, NO_PRE_RELEASE_TAG, NO_PRE_RELEASE_BUILD_SPECIFIED)\n    }\n\n    static fromString(version: string): SemVer | null {\n        return getSemanticVersion(version)\n    }\n\n    major: number\n    minor: number\n    patch: number\n    preReleaseTag: SemVersionPrerelease\n    preReleaseBuild: number\n\n    constructor(\n        major: number, \n        minor: number,\n        patch: number,\n        preReleaseTag: SemVersionPrerelease,\n        preReleaseBuild: number\n    ) {\n        this.major = major\n        this.minor = minor\n        this.patch = patch\n        this.preReleaseTag = preReleaseTag\n        this.preReleaseBuild = preReleaseBuild\n    }\n\n    isPrerelease(): boolean {\n        return this.preReleaseTag !== NO_PRE_RELEASE_TAG\n    }\n\n    private compare(candidate: SemVer) {\n        const {major, minor, patch, preReleaseTag, preReleaseBuild} = candidate \n        if (this.major > major) {\n            return compare.current_higher\n        } else if (this.major < major) {\n            return compare.current_lower\n        }\n\n        if (this.minor > minor) {\n            return compare.current_higher\n        } else if (this.minor < minor) {\n            return compare.current_lower\n        }\n\n        if (this.patch > patch) {\n            return compare.current_higher\n        } else if (this.patch < patch) {\n            return compare.current_lower\n        }\n\n        const currentPrerelease = this.isPrerelease()\n        const candidatePrerelease = candidate.isPrerelease()\n        if (!currentPrerelease && !candidatePrerelease) {\n            return compare.equal\n        }\n\n        if (!currentPrerelease && candidatePrerelease) {\n            return compare.current_higher\n        } else if (currentPrerelease && !candidatePrerelease) {\n            return compare.current_lower\n        }\n\n        const preTag = prereleaseTags[this.preReleaseTag as PrereleaseTag]\n        const comparePreTag = prereleaseTags[preReleaseTag as PrereleaseTag]\n        if (preTag > comparePreTag) {\n            return compare.current_higher\n        } else if (preTag < comparePreTag) {\n            return compare.current_lower\n        }\n\n        if (this.preReleaseBuild > preReleaseBuild) {\n            return compare.current_higher\n        } else if (this.preReleaseBuild < preReleaseBuild) {\n            return compare.current_lower\n        }\n\n        return compare.equal\n    }\n\n    isGreater(candidate: SemVer): boolean {\n        return this.compare(candidate) === compare.current_higher\n    }\n\n    isLower(candidate: SemVer): boolean {\n        return this.compare(candidate) === compare.current_lower\n    }\n\n    isEqual(candidate: SemVer): boolean {\n        return this.compare(candidate) === compare.equal\n    }\n}\n"],
  "mappings": "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",
  "names": ["LOWEST_TAG_VAL", "prereleaseTags", "isPositiveNumber", "n", "getSemanticVersion", "version", "versionSplit", "versionsCore", "v", "parsedVersions", "t", "passed", "semver", "split", "prerelease", "tags", "build", "parsedBuild", "tagVal", "tagValToBuild", "compare", "major", "minor", "patch", "preReleaseTag", "preReleaseBuild", "candidate", "currentPrerelease", "candidatePrerelease", "preTag", "comparePreTag"]
}
